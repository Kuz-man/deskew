---
name: Continuous integration

on:
  push:

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  build:
    name: Continuous integration
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - uses: actions/checkout@v3
        if: env.HAS_SECRETS != 'HAS_SECRETS'

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=ci/requirements.txt

      - name: Checks
        run: c2cciutils-checks
      - name: GitHub event
        run: echo ${GITHUB_EVENT} | python3 -m json.tool
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - run: poetry install
      - run: poetry run prospector --output=pylint -X
      - run: >
          poetry run coverage run --source=deskew --module pytest --durations=0 --verbose --color=yes
          --profile --profile-svg --junitxml=results/test-reports/junit.xml tests &&
          poetry run coverage report &&
          poetry run coverage html --directory=results/coverage

      - uses: actions/upload-artifact@v3
        with:
          name: Test results
          path: results/test-reports

      - name: Init Git
        run: |
          git config credential.helper 'cache --timeout=120'
          git config user.email "<ci@ci.com>"
          git config user.name "CI"
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - name: Init pypi
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
          python3 -m pip install --user wheel twine
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - name: Bump version
        run: |
          poetry version patch
          git add pyproject.toml
          git commit --allow-empty -m "[skip ci] Bump Version"
          git push
        if: |
          github.ref == 'refs/heads/master'
          && env.HAS_SECRETS == 'HAS_SECRETS'
      - name: deploy
        run: c2cciutils-publish --type=version_tag --version=unused
        if: |
          github.ref == 'refs/heads/master'
          && env.HAS_SECRETS == 'HAS_SECRETS'
